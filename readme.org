* Aphrodite

(Work-In-Progress...)

  Aphrodite is a high-performance, Vulkan-based graphics engine designed for game development and graphics applications on Linux.

** Features

  - Vulkan
  - Mesh Shading Support
  - Render Graph
  - Bindless Support, automatic handle code generation with built-in helper module
  - Async Resource Management
  - Coroutine-based Job System
  - Scene Management
  - Built-in Windowing, Input, Event Support
  - UI Support
  - Shader Reflections and Caching
  - Application Framework

** Cloning

  To clone the repository, execute the following commands:

  #+BEGIN_SRC bash
  git clone https://github.com/K1ngst0m/Aphrodite
  cd Aphrodite
  #+END_SRC

** Building and Running

Aphrodite can be built directly on a Linux system or inside a container. The project uses CMake presets to simplify the build configuration process.

*** Native Build

  To build and run the project natively, explore available presets and then build:

  #+BEGIN_SRC bash
  # List available build presets
  cmake --list-presets

  # Configure and build with selected preset
  cmake --preset default && cmake --build build -- -j$(nproc)
  #+END_SRC

*** Container Build

  For a containerized build when you want to avoid installing dependencies directly on your host system:

  #+BEGIN_SRC bash
  # Build with default preset (clang-release)
  ./scripts/container_builder.py

  # Build with specific preset
  ./scripts/container_builder.py clang-debug

  # Clean build
  ./scripts/container_builder.py --clean
  #+END_SRC

  This requires Docker or Podman installed on your system. Build results will be in the =build-container/= directory.

** Usage and Examples

  Aphrodite includes several examples to demonstrate key engine features:

*** [[./examples/hello_aphrodite][Hello Aphrodite]]
  A basic example showcasing the core rendering features of the engine:
  - Resource Loading (buffers, images, shaders)
  - Frame Graph Setup and Management
  - Render Loop Implementation
  - Command Buffer Recording
  - Bindless Resource System
  - Application Configuration

*** [[./examples/render_graph_visualizer][Render Graph Visualizer]]
  A utility example that demonstrates Aphrodite's render graph system in dry run mode:
  - Visualizes render graph structures
  - Exports to GraphViz DOT format
  - Demonstrates dependency analysis
  - Includes simple and complex rendering pipeline examples

For complete and most recent examples, please refer to the ~examples/xxxx/~ directory.

** Documentation

Aphrodite includes detailed documentation in the ~docs/~ directory:

- [[./docs/project_structure.org][Project Structure]] - Overview of the project's directory structure and component organization
- [[./docs/cmake_formatter.org][CMake Formatter]] - Documentation for the CMake formatting tool that ensures consistent style
- [[./docs/dependency_grapher.org][Dependency Grapher]] - Tool for visualizing cmake module dependencies in the project
- [[./docs/include_sorter.org][Include Sorter]] - Tool for maintaining consistent include ordering in source files
- [[./docs/container_build.org][Container Build]] - Documentation for building the project in a containerized environment

** Component structures

The dependency graph shows all engine components and their relationships:
#+CAPTION: Aphrodite Engine Component Dependencies
#+NAME: fig:project-dependencies
[[file:docs/cmake_dependency_graph.svg]]

** Development Tools

The ~scripts/~ directory contains various tools to help with development:

- ~dependency_grapher.py~ - Generates a visual representation of project dependencies
- ~cmake_formatter.py~ - Formats CMake files according to project standards
- ~include_sorter.py~ - Sorts include statements in source files
- ~container_builder.py~ - Builds the project in a containerized environment

** Third Party Libraries

- [[https://github.com/bombela/backward-cpp][backward-cpp]]
- [[https://github.com/g-truc/glm][glm]]
- [[https://github.com/ocornut/imgui][imgui]]
- [[https://github.com/microsoft/mimalloc][mimalloc]]
- [[https://github.com/shader-slang/slang][slang]]
- [[https://github.com/nothings/stb][stb]]
- [[https://github.com/syoyo/tinygltf][tinygltf]]
- [[https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator][Vulkan Memory Allocator]]
- [[https://github.com/libsdl-org/SDL][SDL]]
- [[https://github.com/glfw/glfw][glfw]]
- [[https://github.com/wolfpld/tracy][tracy]]
- [[https://github.com/marzer/tomlplusplus][tomlplusplus]]
- [[https://github.com/martinus/unordered_dense][unordered_dense]]
- [[https://github.com/jbaldwin/libcoro][libcoro]]
- [[https://github.com/KhronosGroup/SPIRV-Cross][SPIRV-Cross]]
- [[https://github.com/KhronosGroup/Vulkan-Headers][Vulkan-Headers]]
