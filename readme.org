* Aphrodite

Aphrodite is a high-performance, Vulkan-based graphics engine designed for game development and graphics applications on Linux.

** Core Features

  - Vulkan
  - Mesh Shading Support
  - Render Graph
  - Bindless Support, automatic handle code generation with built-in helper module
  - Resource Management
  - Coroutine-based Job System
  - Scene Management
  - Built-in Windowing, Input, Event Support
  - UI Support
  - Shader Reflections and Caching
  - Application Framework

** Cloning

To clone the repository, execute the following commands:

#+BEGIN_SRC bash
git clone https://github.com/K1ngst0m/Aphrodite
cd Aphrodite
#+END_SRC

** Building and Running

Aphrodite can be built directly on a Linux system or inside a container. The project uses CMake presets to simplify the build configuration process.

*** Native Build

To build and run the project natively, explore available presets and then build:

#+BEGIN_SRC bash
# List available build presets
cmake --list-presets

# Configure and build with selected preset
cmake --preset default && cmake --build build -- -j$(nproc)
#+END_SRC

*** Container Build

For a containerized build when you want to avoid installing dependencies directly on your host system:

#+BEGIN_SRC bash
# Build with default preset (clang-release)
./scripts/container_builder.py

# Build with specific preset
./scripts/container_builder.py clang-debug

# Clean build
./scripts/container_builder.py --clean
#+END_SRC

This requires Docker or Podman installed on your system. Build results will be in the =build-container/= directory.

** Usage and Examples

Aphrodite includes several examples to demonstrate key engine features:

*** [[./examples/hello_aphrodite][Hello Aphrodite]]
A basic example showcasing the core rendering features of the engine:
- Resource Loading (buffers, images, shaders)
- Render Graph Setup and Management
- Render Loop Implementation
- Command Buffer Recording
- Bindless Resource System
- Application Configuration

*** [[./examples/render_graph_visualizer][Render Graph Visualizer]]
A utility example that demonstrates Aphrodite's render graph system in dry run mode:
- Visualizes render graph structures
- Exports to GraphViz DOT format
- Demonstrates dependency analysis
- Includes simple and complex rendering pipeline examples

For complete and most recent examples, please refer to the ~examples/~ directory.

** Documentation and Development Tools

- [[./docs/project_structure.org][Project Structure]] - Overview of the project's directory structure and component organization

The ~src/~ directory contains detailed documentation for various engine components:

- [[file:src/resource/README.org][Resource Loader System]] - Documentation for the asset loading and management system
  - [[file:src/resource/buffer/README.md][Buffer Loader]] - Handles GPU buffer creation and data uploading
  - [[file:src/resource/image/README.md][Image Loader]] - Processes textures and images with format conversion
  - [[file:src/resource/geometry/README.md][Geometry Loader]] - Imports 3D models with optimization and mesh shader support
  - [[file:src/resource/shader/README.md][Shader Loader]] - Compiles and manages shader programs

- [[file:src/renderGraph/README.org][Render Graph System]] - Documentation for the render graph system
- [[file:src/global/README.org][Global Manager]] - Documentation for the global instance management system
- [[file:src/exception/README.org][Exception Handling]] - Documentation for the error handling system

The ~scripts/~ directory contains development tools integrated into the build system as CMake targets with an ~aph-~ prefix:

- [[file:docs/dependency_grapher.org][Dependency Grapher]] - Tool for visualizing cmake module dependencies in the project
  - Tool: ~dependency_grapher.py~
  - CMake targets: ~aph-cmake-dependency-graph~, ~aph-cmake-dependency-graph-dot~, ~aph-cmake-dependency-graph-svg~

- [[file:docs/cmake_formatter.org][CMake Formatter]] - Documentation for the CMake formatting tool that ensures consistent style
  - Tool: ~cmake_formatter.py~
  - CMake targets: ~aph-check-cmake-format~, ~aph-fix-cmake-format~

- [[file:docs/clang_formatter.org][Clang Formatter]] - Documentation for C++ source formatting tool
  - Tool: ~clang_formatter.py~
  - CMake targets: ~aph-check-clang-format~, ~aph-fix-clang-format~

- [[file:docs/container_build.org][Container Build]] - Documentation for building the project in a containerized environment
  - Tool: ~container_builder.py~


** Component Structure

The engine is built as a set of modular components with clear separation of concerns. The dependency graph shows all engine components and their relationships:

#+CAPTION: Aphrodite Engine Component Dependencies
#+NAME: fig:project-dependencies
[[file:docs/cmake_dependency_graph.svg]]

** Third Party Libraries

- [[https://github.com/bombela/backward-cpp][backward-cpp]]
- [[https://github.com/g-truc/glm][glm]]
- [[https://github.com/ocornut/imgui][imgui]]
- [[https://github.com/microsoft/mimalloc][mimalloc]]
- [[https://github.com/shader-slang/slang][slang]]
- [[https://github.com/nothings/stb][stb]]
- [[https://github.com/syoyo/tinygltf][tinygltf]]
- [[https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator][Vulkan Memory Allocator]]
- [[https://github.com/libsdl-org/SDL][SDL]]
- [[https://github.com/glfw/glfw][glfw]]
- [[https://github.com/wolfpld/tracy][tracy]]
- [[https://github.com/marzer/tomlplusplus][tomlplusplus]]
- [[https://github.com/martinus/unordered_dense][unordered_dense]]
- [[https://github.com/jbaldwin/libcoro][libcoro]]
- [[https://github.com/KhronosGroup/SPIRV-Cross][SPIRV-Cross]]
- [[https://github.com/KhronosGroup/Vulkan-Headers][Vulkan-Headers]]
