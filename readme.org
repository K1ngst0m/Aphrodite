* Aphrodite

(Work-In-Progress...)

  Aphrodite is a high-performance, Vulkan-based graphics engine designed for game development and graphics applications on Linux.

** Features

  - Vulkan
  - Mesh Shading Support
  - Render Graph
  - Bindless Support, automatic handle code generation with built-in helper module 
  - Async Resource Management
  - Coroutine-based Job System
  - Scene Management
  - Built-in Windowing, Input, Event Support
  - UI Support
  - Shader Reflections and Caching
  - Application Framework

** Cloning

  To clone the Aphrodite repository, execute the following commands:

  #+BEGIN_SRC bash
  git clone https://github.com/K1ngst0m/Aphrodite
  cd Aphrodite
  #+END_SRC

** Building and Running

  To build and run the project, chose one preset to configure and build:

  #+BEGIN_SRC bash
  cmake --list-presets
  cmake --preset default && cmake --build build -- -j$(nproc)
  # run debug or release executable
  ./build/debug/bin/hello_aphrodite
  ./build/release/bin/hello_aphrodite
  #+END_SRC

** Usage

  For complete and most recent examples, please refer to the ~examples/xxxx/~ directory.

  - Resource Loading

    #+BEGIN_SRC cpp
    // Create a batch loading request
    aph::LoadRequest loadRequest = m_pResourceLoader->getLoadRequest();
    
    // vertex buffer
    {
        aph::BufferLoadInfo bufferLoadInfo{ 
            .debugName = "cube::vertex_buffer",
            .data = vertices.data(),
            .createInfo = {
                .size = vertices.size() * sizeof(vertices[0]),
                .usage = aph::BufferUsage::Storage |
                         aph::BufferUsage::Vertex,
                .domain = aph::MemoryDomain::Device,
            } 
        };

        loadRequest.add(bufferLoadInfo, &m_pVertexBuffer);
    }

    // index buffer
    {
        aph::BufferLoadInfo bufferLoadInfo{ 
            .debugName = "cube::index_buffer",
            .data = indices.data(),
            .createInfo = {
                .size = indices.size() * sizeof(indices[0]),
                .usage = aph::BufferUsage::Storage |
                         aph::BufferUsage::Index,
                .domain = aph::MemoryDomain::Device,
            } 
        };

        loadRequest.add(bufferLoadInfo, &m_pIndexBuffer);
    }

    // image and sampler
    {
        APH_VR(m_pDevice->create(aph::vk::SamplerCreateInfo{}.preset(aph::SamplerPreset::LinearClamp), &m_pSampler));
        
        aph::ImageLoadInfo imageLoadInfo{
            .debugName = "container texture",
            .data = "texture://container2.png",
            .createInfo = {
                .usage = aph::ImageUsage::Sampled,
                .domain = aph::ImageDomain::Device,
                .imageType = aph::ImageType::e2D,
            }
        };

        loadRequest.add(imageLoadInfo, &m_pImage);
    }

    // shader loading
    {
        aph::ShaderLoadInfo shaderLoadInfo{ 
            .debugName = "ts + ms + fs",
            .data = { "shader_slang://hello_mesh.slang" },
            .stageInfo = {
                { aph::ShaderStage::TS, "taskMain" },
                { aph::ShaderStage::MS, "meshMain" },
                { aph::ShaderStage::FS, "fragMain" },
            } 
        };

        loadRequest.add(shaderLoadInfo, &m_program[ShadingType::Mesh]);
    }

    // Execute all loading tasks synchronously
    loadRequest.load();
    
    // Or execute asynchronously and get a future to check completion
    // std::future<Result> future = loadRequest.loadAsync();
    // future.wait();
    #+END_SRC

  - Frame Graph Operations

    #+BEGIN_SRC cpp
    // record graph execution
    for (auto* graph : m_renderer->recordGraph())
    {
        auto drawPass = graph->createPass("drawing cube", aph::QueueType::Graphics);
        drawPass->setColorOut("render output",
                              {
                                  .extent = {m_pSwapChain->getWidth(), m_pSwapChain->getHeight(), 1},
                                  .format = m_pSwapChain->getFormat(),
                              });
        drawPass->setDepthStencilOut("depth buffer",
                                     {
                                         .extent = {m_pSwapChain->getWidth(), m_pSwapChain->getHeight(), 1},
                                         .format = m_pDevice->getDepthFormat(),
                                     });
        drawPass->addTextureIn("container texture", m_pImage);
        drawPass->addUniformBufferIn("matrix ubo", m_pMatBuffer);

        graph->setBackBuffer("render output");

        drawPass->recordExecute([this](auto* pCmd) {
            pCmd->beginDebugLabel({
                .name = "mesh shading path",
                .color = { 0.5f, 0.3f, 0.2f, 1.0f },
            });
            pCmd->setProgram(m_program[ShadingType::Mesh]);
            pCmd->setResource({ m_pMatrixBuffer }, 0, 0);
            pCmd->setResource({ m_pImage }, 1, 0);
            pCmd->setResource({ m_pSampler }, 1, 1);
            pCmd->setResource({ m_pVertexBuffer }, 0, 1);
            pCmd->setResource({ m_pIndexBuffer }, 0, 2);
            pCmd->draw(aph::DispatchArguments{ 1, 1, 1 });
            pCmd->endDebugLabel();
        });

        // export to the graphviz dot code and write to the filesystem
        // fs.write(..., graph->exportToGraphViz());
    }

    // ...

    // render loop
    {
        // ...
        m_renderer->update();
        m_renderer->render();
        // ...
    }
    #+END_SRC

  - Bindless style

    Update and define the bindless handle name, the loader will automatically generate the shader module (in memory) with handle definitions.

    #+BEGIN_SRC cpp
    // shader and resource preparation
    {
        auto bindless = m_pDevice->getBindlessResource();
        {
            bindless->updateResource(m_pImage, "texture_container");
            bindless->updateResource(m_pSampler, "samp");
            bindless->updateResource(m_pMatrixBuffer, "transform_cube");
            bindless->updateResource(m_pVertexBuffer, "vertex_cube");
            bindless->updateResource(m_pIndexBuffer, "index_cube");
        }

        aph::LoadRequest loadRequest = m_pResourceLoader->getLoadRequest();
        
        aph::ShaderLoadInfo shaderLoadInfo{ 
            .debugName = "ts + ms + fs (bindless)",
            .data = { "shader_slang://hello_mesh_bindless.slang" },
            .stageInfo = {
                { aph::ShaderStage::TS, "taskMain" },
                { aph::ShaderStage::MS, "meshMain" },
                { aph::ShaderStage::FS, "fragMain" },
            }, 
            .pBindlessResource = bindless
        };

        loadRequest.add(shaderLoadInfo, &m_program[ShadingType::MeshBindless]);
        loadRequest.load();
    }

    // record graph execution
    for (auto* graph : m_renderer->recordGraph())
    {
        auto drawPass = graph->createPass("drawing cube", aph::QueueType::Graphics);
        // ...

        drawPass->recordExecute([this](auto* pCmd) {
            pCmd->beginDebugLabel({
                .name = "mesh shading path (bindless)",
                .color = { 0.5f, 0.3f, 0.2f, 1.0f },
            });
            pCmd->setProgram(m_program[ShadingType::MeshBindless]);
            pCmd->draw(aph::DispatchArguments{ 1, 1, 1 });
            pCmd->endDebugLabel();
        });
    }
    // ...
    #+END_SRC

    The generated handle code would look like this:
    #+BEGIN_SRC hlsl
    struct HandleData
    {
        uint texture_container;
        uint samp;
        uint transform_cube;
        uint vertex_cube;
        uint index_cube;
    };
    
    [[vk::binding(0, Set::eHandle)]] ConstantBuffer<HandleData> handleData;
    
    namespace handle
    {
        static bindless::Texture texture_container = bindless::Texture(handleData.texture_container);
        static bindless::Sampler2D samp = bindless::Sampler2D(handleData.samp);
        static bindless::Buffer transform_cube = bindless::Buffer(handleData.transform_cube);
        static bindless::Buffer vertex_cube = bindless::Buffer(handleData.vertex_cube);
        static bindless::Buffer index_cube = bindless::Buffer(handleData.index_cube);
    }
    #+END_SRC

    In shader (slang) code, the built-in bindless module and generated handle code are automatically patched to the code, so you don't need to import them manually:
    #+BEGIN_SRC hlsl
    // import modules.bindless
    // ...

    VertexIn GetVertex(uint indexId)
    {
        let vertexId = handle::index_cube.get<uint>(indexId);
        let vertex = handle::vertex_cube.get<VertexIn>(vertexId);
        return vertex;
    }

    // ...
    let color = handle::texture_container.sample(handle::samp, input.uv);
    // ...
    #+END_SRC

** Third Party Libraries

- [[https://github.com/bombela/backward-cpp][backward-cpp]]
- [[https://github.com/g-truc/glm][glm]]
- [[https://github.com/ocornut/imgui][imgui]]
- [[https://github.com/microsoft/mimalloc][mimalloc]]
- [[https://github.com/shader-slang/slang][slang]]
- [[https://github.com/nothings/stb][stb]]
- [[https://github.com/syoyo/tinygltf][tinygltf]]
- [[https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator][Vulkan Memory Allocator]]
- [[https://github.com/libsdl-org/SDL][SDL]]
- [[https://github.com/glfw/glfw][glfw]]
- [[https://github.com/wolfpld/tracy][tracy]]
- [[https://github.com/marzer/tomlplusplus][tomlplusplus]]
- [[https://github.com/martinus/unordered_dense][unordered_dense]]
- [[https://github.com/jbaldwin/libcoro][libcoro]]
- [[https://github.com/KhronosGroup/SPIRV-Cross][SPIRV-Cross]]
- [[https://github.com/KhronosGroup/Vulkan-Headers][Vulkan-Headers]]
