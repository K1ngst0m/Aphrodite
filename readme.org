* Centimani
** Cloning

#+BEGIN_SRC bash
git clone https://github.com/K1ngst0m/Centimani

cd Centimani
#+END_SRC

** Building and Running

#+BEGIN_SRC bash
cmake -B build && cmake --build build -- -j$(nproc)

./build/bin/xxx
#+END_SRC

** Hello world Example

#+BEGIN_SRC cpp
void triangle_demo::init() {
    // setup window
    m_window = vkl::Window::Create(1366, 768);
    m_window->setCursorPosCallback([=](double xposIn, double yposIn) {
        this->mouseHandleDerive(xposIn, yposIn);
    });

    m_window->setFramebufferSizeCallback([=](int width, int height) {
        // this->m_framebufferResized = true;
    });

    m_window->setKeyCallback([=](int key, int scancode, int action, int mods) {
        this->keyboardHandleDerive(key, scancode, action, mods);
    });


    // renderer config
    vkl::RenderConfig config{
        .enableDebug         = true,
        .enableUI            = false,
        .initDefaultResource = true,
        .maxFrames           = 2,
    };
    // setup renderer
    m_renderer = vkl::Renderer::Create(vkl::RenderBackend::VULKAN, &config, m_window->getWindowData());

    // build draw command
    m_renderer->drawDemo();
}

void triangle_demo::run() {
    // loop
    while (!m_window->shouldClose()) {
        // get frame deltatime
        auto timer = vkl::Timer(m_deltaTime);

        m_window->pollEvents();
        m_renderer->renderOneFrame();
    }
}

void triangle_demo::finish() {
    // wait device idle before cleanup
    m_renderer->idleDevice();
    m_renderer->destroy();
}
#+END_SRC

*** scene loading and rendering

#+BEGIN_SRC cpp
    // scene global argument setup
    {
        m_sceneManager = vkl::SceneManager::Create(vkl::SceneManagerType::DEFAULT);
        m_sceneManager->setAmbient(glm::vec4(0.2f));
    }

    // scene camera
    {
        m_defaultCamera = m_sceneManager->createCamera(m_window->getAspectRatio());
        m_defaultCamera->setType(vkl::CameraType::FIRSTPERSON);
        m_defaultCamera->setPosition({0.0f, 0.0f, -3.0f, 1.0f});
        m_defaultCamera->setPerspective(60.0f, m_window->getAspectRatio(), 0.1f, 256.0f);
        m_defaultCamera->setMovementSpeed(2.5f);
        m_defaultCamera->setRotationSpeed(0.1f);

        auto &node = m_sceneManager->getRootNode()->createChildNode();
        node->attachObject(m_defaultCamera);

        m_sceneManager->setMainCamera(m_defaultCamera);
    }

    // point light
    {
        m_pointLight = m_sceneManager->createLight();
        m_pointLight->setPosition({1.2f, 1.0f, 2.0f, 1.0f});
        m_pointLight->setDiffuse({0.5f, 0.5f, 0.5f, 1.0f});
        m_pointLight->setSpecular({1.0f, 1.0f, 1.0f, 1.0f});
        m_pointLight->setType(vkl::LightType::POINT);

        auto &node = m_sceneManager->getRootNode()->createChildNode();
        node->attachObject(m_pointLight);
    }

    // direction light
    {
        m_directionalLight = m_sceneManager->createLight();
        m_directionalLight->setDirection({-0.2f, -1.0f, -0.3f, 1.0f});
        m_directionalLight->setDiffuse({0.5f, 0.5f, 0.5f, 1.0f});
        m_directionalLight->setSpecular({1.0f, 1.0f, 1.0f, 1.0f});
        m_directionalLight->setType(vkl::LightType::DIRECTIONAL);

        auto &node = m_sceneManager->getRootNode()->createChildNode();
        node->attachObject(m_directionalLight);
    }

    // load from gltf file
    {
        glm::mat4 modelTransform = glm::scale(glm::mat4(1.0f), glm::vec3(3.0f));
        modelTransform           = glm::rotate(modelTransform, 3.14f, glm::vec3(0.0f, 1.0f, 0.0f));
        m_model                  = m_sceneManager->createEntity(vkl::AssetManager::GetModelDir() / "Sponza/glTF/Sponza.gltf");
        auto &node               = m_sceneManager->getRootNode()->createChildNode(modelTransform);
        node->attachObject(m_model);
    }

    // box prefab
    {
        glm::mat4 modelTransform = glm::scale(glm::mat4(1.0f), glm::vec3(2.0f));
        modelTransform           = glm::rotate(modelTransform, 3.14f, glm::vec3(0.0f, 1.0f, 0.0f));
        auto prefab_cube_model        = m_sceneManager->getEntityWithId(vkl::PREFAB_ENTITY_BOX);
        auto &node = m_sceneManager->getRootNode()->createChildNode(modelTransform);
        node->attachObject(prefab_cube_model);
    }

    // plane prefab
    {
        glm::mat4 modelTransform = glm::scale(glm::mat4(1.0f), glm::vec3(2.0f));
        modelTransform           = glm::rotate(modelTransform, 3.14f, glm::vec3(0.0f, 1.0f, 0.0f));
        auto prefab_plane_model        = m_sceneManager->getEntityWithId(vkl::PREFAB_ENTITY_PLANE);
        auto &node = m_sceneManager->getRootNode()->createChildNode(modelTransform);
        node->attachObject(prefab_plane_model);
    }

    // sphere
    {
        glm::mat4 modelTransform = glm::scale(glm::mat4(1.0f), glm::vec3(2.0f));
        modelTransform           = glm::rotate(modelTransform, 3.14f, glm::vec3(0.0f, 1.0f, 0.0f));
        auto prefab_sphere_model        = m_sceneManager->getEntityWithId(vkl::PREFAB_ENTITY_SPHERE);
        auto &node = m_sceneManager->getRootNode()->createChildNode(modelTransform);
        node->attachObject(prefab_sphere_model);
    }

    {
        m_sceneRenderer = m_renderer->getSceneRenderer();
        m_sceneRenderer->setScene(m_sceneManager);
        m_sceneRenderer->setShadingModel(vkl::ShadingModel::UNLIT);
        m_sceneRenderer->loadResources();
    }
... // record draw commands
    m_sceneRenderer->drawScene();
... // update and draw
    m_sceneManager->update();
    m_sceneRenderer->update();
...
#+END_SRC
