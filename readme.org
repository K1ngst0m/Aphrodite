* Aphrodite

(Work-In-Progress...)

  Aphrodite is a high-performance, Vulkan-based graphics engine designed for game development and graphics applications on Linux.

** Features

  - Vulkan
  - Mesh Shading Support
  - Render Graph
  - Async Resource Management
  - Multi-threading, Job System
  - Scene Management
  - Built-in Windowing, Input, Event Support
  - UI Support
  - Shader Reflections
  - Application Framework

** Cloning

  To clone the Aphrodite repository, execute the following commands:

  #+BEGIN_SRC bash
  git clone https://github.com/K1ngst0m/Aphrodite
  cd Aphrodite
  #+END_SRC

** Building and Running

  To build and run the project, chose one preset to configure and build:

  #+BEGIN_SRC bash
  cmake --list-presets
  cmake --preset default && cmake --build build -- -j$(nproc)
  # run debug or release executable
  ./build/debug/bin/hello_aphrodite
  ./build/release/bin/hello_aphrodite
  #+END_SRC

** Usage

  For complete and most recent examples, please refer to the ~examples/xxxx/~ directory.

  - Resource Loading

    #+BEGIN_SRC cpp
    // vertex buffer
    {
        aph::BufferLoadInfo bufferLoadInfo{
        .debugName  = "cube::vertex_buffer",
        .data       = vertices.data(),
        .createInfo = {
                .size  = static_cast<uint32_t>(vertices.size() * sizeof(vertices[0])),
                .usage = ::vk::BufferUsageFlagBits::eStorageBuffer | ::vk::BufferUsageFlagBits::eVertexBuffer}};

        m_pResourceLoader->loadAsync(bufferLoadInfo, &m_pVB);
    }

    // ...

    // image and sampler
    {
        APH_VR(m_pDevice->create(aph::vk::SamplerCreateInfo{}.preset(aph::SamplerPreset::LinearClamp), &m_pSampler));
        aph::ImageLoadInfo imageLoadInfo{.data       = "texture://container2.png",
                                         .createInfo = {
                                             .usage     = ::vk::ImageUsageFlagBits::eSampled,
                                             .domain    = aph::ImageDomain::Device,
                                             .imageType = aph::ImageType::e2D,
                                         }};

        m_pResourceLoader->loadAsync(imageLoadInfo, &m_pImage);
    }

    // shader loading
    {
        aph::ShaderLoadInfo shaderLoadInfo{ .data = { "shader_slang://hello_mesh.slang" },
                                            .stageInfo = {
                                                { aph::ShaderStage::TS, "taskMain" },
                                                { aph::ShaderStage::MS, "meshMain" },
                                                { aph::ShaderStage::FS, "fragMain" },
                                            } };

        m_pResourceLoader->loadAsync(shaderLoadInfo, &m_program[ShadingType::Mesh];
    }

    // ...

    // wait for resource loading complete
    m_pResourceLoader->wait();
    #+END_SRC

  - Frame Graph Operations

    #+BEGIN_SRC cpp
    // record graph execution
        m_renderer->recordGraph([this](auto* graph) {
            auto drawPass = graph->createPass("drawing cube", aph::QueueType::Graphics);
            drawPass->setColorOut("render output",
                                  {
                                      .extent = {m_pSwapChain->getWidth(), m_pSwapChain->getHeight(), 1},
                                      .format = m_pSwapChain->getFormat(),
                                  });
            drawPass->setDepthStencilOut("depth buffer",
                                         {
                                             .extent = {m_pSwapChain->getWidth(), m_pSwapChain->getHeight(), 1},
                                             .format = m_pDevice->getDepthFormat(),
                                         });
            drawPass->addTextureIn("container texture", m_pImage);
            drawPass->addUniformBufferIn("matrix ubo", m_pMatBuffer);

            graph->setBackBuffer("render output");

            drawPass->recordExecute([this](auto* pCmd) {
                pCmd->beginDebugLabel({
                    .name = "mesh shading path",
                    .color = { 0.5f, 0.3f, 0.2f, 1.0f },
                });
                pCmd->setProgram(m_program[ShadingType::Mesh]);
                pCmd->setResource({ m_pMatrixBffer }, 0, 0);
                pCmd->setResource({ m_pImage }, 1, 0);
                pCmd->setResource({ m_pSampler }, 1, 1);
                pCmd->setResource({ m_pVertexBuffer }, 0, 1);
                pCmd->setResource({ m_pIndexBuffer }, 0, 2);
                pCmd->draw(aph::DispatchArguments{ 1, 1, 1 });
                pCmd->endDebugLabel();
            });
        });


    ...

    // render loop
    {
        ...
        m_renderer->update();
        m_renderer->render();
        ...
    }
    #+END_SRC

  - Bindless style

    update and define the bindless handle name, the loader would automatically generate the shader module of handle definitions (default module name is same as loaded shader name on gen folder).

    #+BEGIN_SRC cpp
    // shader and resource preparation
    {
        auto bindless = m_pDevice->getBindlessResource();
        {
            m_drawDataOffset = bindless->updateResource(m_pImage, "texture_container");
            bindless->updateResource(m_pSampler, "samp");
            bindless->updateResource(m_pMatrixBffer, "transform_cube");
            bindless->updateResource(m_pVertexBuffer, "vertex_cube");
            bindless->updateResource(m_pIndexBuffer, "index_cube");
        }

        aph::ShaderLoadInfo shaderLoadInfo{ .data = { "shader_slang://hello_mesh_bindless.slang" },
                                            .stageInfo = {
                                                {  aph::ShaderStage::TS,  "taskMain" },
                                                {  aph::ShaderStage::MS,  "meshMain" },
                                                {  aph::ShaderStage::FS,  "fragMain" },
                                            }, .pBindlessResource = bindless};

        APH_VR(m_pResourceLoader->load(shaderLoadInfo, &m_program[ShadingType::MeshBindless]));
    }

    // record graph execution
        m_renderer->recordGraph([this](auto* graph) {
            auto drawPass = graph->createPass("drawing cube", aph::QueueType::Graphics);
            ...
  
            drawPass->recordExecute([this](auto* pCmd) {
                pCmd->beginDebugLabel({
                    .name = "mesh shading path (bindless)",
                    .color = { 0.5f, 0.3f, 0.2f, 1.0f },
                });
                pCmd->setProgram(m_program[ShadingType::MeshBindless]);
                pCmd->draw(aph::DispatchArguments{ 1, 1, 1 }, { m_drawDataOffset });
                pCmd->endDebugLabel();
            });
        });
    ...
    #+END_SRC

    the generated handle code would look like this:
    #+BEGIN_SRC hlsl
    struct HandleData
    {
        uint texture_container;
        uint samp;
        uint transform_cube;
        uint vertex_cube;
        uint index_cube;
    };
    
    [[vk::binding(0, Set::eHandle)]] ConstantBuffer<HandleData> handleData;
    
    namespace handle
    {
        static bindless::Texture texture_container = bindless::Texture(handleData.texture_container);
        static bindless::Sampler2D samp = bindless::Sampler2D(handleData.samp);
        static bindless::Buffer transform_cube = bindless::Buffer(handleData.transform_cube);
        static bindless::Buffer vertex_cube = bindless::Buffer(handleData.vertex_cube);
        static bindless::Buffer index_cube = bindless::Buffer(handleData.index_cube);
    }

    #+END_SRC

    on shader (slang) part, you should import your generated module on `handle::` namespace, e.g.:
    #+BEGIN_SRC hlsl
    import modules.bindless;
    import gen.hello_mesh_bindless;
    ...

    VertexIn GetVertex(uint indexId)
    {
        let vertexId = handle::index_cube.get<uint>(indexId);
        let vertex = handle::vertex_cube.get<VertexIn>(vertexId);
        return vertex;
    }

    ...
        let color = handle::texture_container.sample(handle::samp, input.uv);
    ...
    #+END_SRC


** Third Party Libraries

- [[https://github.com/bombela/backward-cpp][backward-cpp]]
- [[https://github.com/g-truc/glm][glm]]
- [[https://github.com/ocornut/imgui][imgui]]
- [[https://github.com/microsoft/mimalloc][mimalloc]]
- [[https://github.com/shader-slang/slang][slang]]
- [[https://github.com/nothings/stb][stb]]
- [[https://github.com/syoyo/tinygltf][tinygltf]]
- [[https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator][vma]]
- [[https://github.com/libsdl-org/SDL][SDL2]]
- [[https://github.com/glfw/glfw][glfw]]
- [[https://github.com/wolfpld/tracy][tracy]]
- [[https://github.com/marzer/tomlplusplus][tomlplusplus]]
- [[https://github.com/martinus/unordered_dense][unordered_dense]]
- [[https://github.com/bombela/backward-cpp][backward-cpp]]
- [[https://github.com/KhronosGroup/SPIRV-Cross][SPIRV-cross]]

