#+title: Include Sorter Documentation
#+options: toc:nil

* Overview

The Include Sorter is a tool that helps maintain consistent include ordering across the Aphrodite codebase. It automatically sorts includes into predefined categories and ensures proper spacing between different include groups.

* Features

- Automatic include categorization
- Consistent include ordering
- Integration with CMake build system
- Support for both checking and fixing include order
- Works with compile_commands.json for automatic file discovery

* Include Categories

Includes are sorted into the following categories (in order of priority):

** Current Component Headers
- Headers from the same component (e.g., =#include "component.h"=)
- Priority: 0

** Core Engine Components
- Headers from core engine components (common, math)
- Pattern: =#include "common/..."= or =#include "math/..."=
- Priority: 1

** Project Headers
- Other project-specific headers
- Pattern: =#include "..."= (not matching other categories)
- Priority: 2

** Third-Party Libraries
- External library headers
- Supported libraries: glm, stb, tiny_gltf, slang, SDL3, imgui
- Pattern: =#include "glm/..."=, =#include "stb/..."=, etc.
- Priority: 3

** System Headers
- Standard library and system headers
- Pattern: =#include <...>=
- Priority: 4

* Usage

** Command Line

The include sorter can be used directly from the command line:

#+begin_src bash
# Check include ordering
./scripts/include_sorter.py --check [files...]

# Fix include ordering
./scripts/include_sorter.py --fix [files...]

# Use compile_commands.json for automatic file discovery
./scripts/include_sorter.py --check --compile-commands build/compile_commands.json
#+end_src

** CMake Integration

The include sorter is integrated with CMake and provides several targets:

*** Global Targets

#+begin_src bash
# Check includes for all targets
cmake --build build --target check-includes

# Fix includes for all targets
cmake --build build --target fix-includes
#+end_src

*** Target-Specific Commands

#+begin_src bash
# Check includes for a specific target (e.g., engine)
cmake --build build --target check-includes-aph-engine

# Fix includes for a specific target
cmake --build build --target fix-includes-aph-engine
#+end_src

* Example

Before:

#+begin_src cpp
#include <vector>
#include "math/math.h"
#include "common/logger.h"
#include <string>
#include "component.h"
#include "glm/glm.hpp"
#+end_src

After:

#+begin_src cpp
#include "component.h"

#include "common/logger.h"
#include "math/math.h"

#include "glm/glm.hpp"

#include <string>
#include <vector>
#+end_src

* Adding to New Targets

To add include checking to a new target, add the following to its CMakeLists.txt:

#+begin_src cmake
aph_add_include_check_targets(your-target-name)
#+end_src

* Contributing

When adding new third-party libraries to the project, update the third-party category pattern in =scripts/include_sorter.py=:

#+begin_src python
'third_party': (3, r'^#include "(glm/|stb/|tiny_gltf|slang|SDL3/|imgui|new-library)')
#+end_src

* Best Practices

1. Always run include checks before committing changes
2. Use the CMake targets in your CI/CD pipeline
3. Keep the include categories up to date when adding new dependencies
4. Consider running =fix-includes= before major refactoring
