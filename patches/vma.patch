diff --git a/include/vk_mem_alloc.h b/include/vk_mem_alloc.h
index 6f71d5b..17f3b61 100644
--- a/include/vk_mem_alloc.h
+++ b/include/vk_mem_alloc.h
@@ -6204,7 +6204,7 @@ private:
 class VmaWin32Handle
 {
     // ABI compatibility
-    void* placeholder = VMA_NULL;
+    [[maybe_unused]] void* placeholder = VMA_NULL;
     VMA_RW_MUTEX placeholder2;
 };
 #endif // VMA_EXTERNAL_MEMORY_WIN32
@@ -6771,7 +6771,7 @@ void VmaBlockMetadata::DebugLogAllocation(VkDeviceSize offset, VkDeviceSize size
         VmaAllocation allocation = reinterpret_cast<VmaAllocation>(userData);
 
         userData = allocation->GetUserData();
-        const char* name = allocation->GetName();
+        [[maybe_unused]] const char* name = allocation->GetName();
 
 #if VMA_STATS_STRING_ENABLED
         VMA_LEAK_LOG_FORMAT("UNFREED ALLOCATION; Offset: %" PRIu64 "; Size: %" PRIu64 "; UserData: %p; Name: %s; Type: %s; Usage: %" PRIu64,
@@ -14414,7 +14414,7 @@ VkResult VmaAllocator_T::CheckCorruption(uint32_t memoryTypeBits)
 VkResult VmaAllocator_T::AllocateVulkanMemory(const VkMemoryAllocateInfo* pAllocateInfo, VkDeviceMemory* pMemory)
 {
     AtomicTransactionalIncrement<VMA_ATOMIC_UINT32> deviceMemoryCountIncrement;
-    const uint64_t prevDeviceMemoryCount = deviceMemoryCountIncrement.Increment(&m_DeviceMemoryCount);
+    [[maybe_unused]] const uint64_t prevDeviceMemoryCount = deviceMemoryCountIncrement.Increment(&m_DeviceMemoryCount);
 #if VMA_DEBUG_DONT_EXCEED_MAX_MEMORY_ALLOCATION_COUNT
     if(prevDeviceMemoryCount >= m_PhysicalDeviceProperties.limits.maxMemoryAllocationCount)
     {
