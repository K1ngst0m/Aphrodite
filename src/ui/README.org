#+TITLE: Aphrodite UI System
#+OPTIONS: toc:2

* Overview

The UI system implements a type-safe, object-oriented abstraction over ImGui, providing flexible widget composition and render integration capabilities. The architecture emphasizes memory safety, performance, and seamless integration with the rendering pipeline.

* System Architecture

** Core Components

*** UI Manager (~UI~)
- ImGui context lifecycle management
- Font registry and rendering
- Window/widget pools and memory management
- Frame synchronization with render pipeline
- Vulkan backend integration
- Breadcrumb debugging system for tracking UI rendering path

*** Widget Base (~Widget~)
- Abstract representation of UI elements
- Type identification through enum-based RTTI alternative
- State management and property access
- Virtual draw interface with ImGui binding

*** Container System
- ~WidgetContainer~ - Abstract container interface (non-window)
- ~WidgetWindow~ - ImGui window implementation with containment capabilities
- Type-safe widget registration and lifecycle management

*** Widget Type Hierarchy
- Core widgets (Label, Button, Checkbox, RadioButton)
- Layout components (Separator, HorizontalSpace, VerticalSeparator, Column)
- Input controls (SliderFloat variants, TextBox, Dropdown)
- Data visualization (PlotLines, Histogram, ProgressBar)
- Drawing primitives (DrawLine, FilledRect, DrawCurve, DrawText, DrawTooltip)
- Scene controls (CameraControlWidget)
- Dynamic content (DynamicText, DebugTexture)

** Scene Widget System
The system includes specialized widgets for scene interaction:

*** CameraControlWidget
- Unified interface for managing camera parameters
- Support for both perspective and orthographic camera types
- Controls for position, target, up vector, FOV, near/far planes
- Matrix information display with formatted output
- Camera property monitoring (distance, direction, type)

* Implementation Details

** Type System

The UI system uses enum-based type identification to avoid RTTI:

#+BEGIN_SRC cpp
enum class WidgetType {
    Label,
    Button,
    Checkbox,
    // ...
    CameraControl,
    Custom
};

class Widget {
public:
    virtual WidgetType getType() const = 0;
    // ...
};

class Button : public Widget {
public:
    WidgetType getType() const override { 
        return WidgetType::Button;
    }
    // ...
};
#+END_SRC

** ImGui Integration

The system interfaces with ImGui's Vulkan backend through a command buffer interface:

#+BEGIN_SRC cpp
void UI::render(vk::CommandBuffer* pCmd) {
    // Finalize ImGui frame
    ImGui::Render();
    
    // Record ImGui drawing commands to command buffer
    ImDrawData* drawData = ImGui::GetDrawData();
    ImGui_ImplVulkan_RenderDrawData(drawData, pCmd->getHandle());
    
    // Handle platform viewports if enabled
    if (ImGui::GetIO().ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
        ImGui::UpdatePlatformWindows();
        ImGui::RenderPlatformWindowsDefault();
    }
}
#+END_SRC

** Breadcrumb Debugging System

The UI system includes a breadcrumb mechanism for tracking UI operations:

#+BEGIN_SRC cpp
// Enable breadcrumb tracking
ui->enableBreadcrumbs(true);

// Breadcrumbs are automatically collected during rendering
// Each operation adds a breadcrumb with timestamp and description
void UI::render(vk::CommandBuffer* pCmd) {
    // Clear breadcrumbs for the new frame if enabled
    if (m_breadcrumbsEnabled) {
        clearBreadcrumbs();
        // Set a start timestamp for this frame
        m_breadcrumbTimer.set("frame_start");
    }

    // Add breadcrumbs for key operations
    addBreadcrumb("Render", "Starting render process", BreadcrumbLevel::TopLevel);
    // ...
    
    // Log breadcrumbs at end of frame if enabled
    if (m_breadcrumbsEnabled) {
        UI_LOG_INFO("%s", getBreadcrumbString());
    }
}
#+END_SRC

* API Usage

** Initialization

The UI system requires valid Vulkan context information:

#+BEGIN_SRC cpp
aph::UICreateInfo createInfo{
    .pDevice = pDevice,
    .pInstance = pInstance,
    .pSwapchain = pSwapchain,
    .pWindow = pWindow,
    .flags = aph::UIFlagBits::Docking | aph::UIFlagBits::ViewportEnable,
    .configFile = "imgui.ini",
    .breadcrumbsEnabled = true  // Optional debugging feature
};

Expected<UI*> uiResult = aph::UI::Create(createInfo);
APH_VERIFY_RESULT(uiResult);
aph::UI* pUI = uiResult.value();
#+END_SRC

** Window Management

Windows serve as primary containers for widgets:

#+BEGIN_SRC cpp
Expected<WidgetWindow*> windowResult = pUI->createWindow("Debug Tools");
if (!windowResult) {
    return windowResult.error();
}

WidgetWindow* window = windowResult.value();
window->setSize({640.0f, 480.0f});
window->setFlags(ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize);

#+END_SRC

** Widget Creation

The system uses template-based widget factory methods:

#+BEGIN_SRC cpp
// Template instantiation handles type-specific allocation
auto slider = pUI->createWidget<SliderFloat3>();
slider->setRange(-10.0f, 10.0f);
slider->setFormat("%.3f");
slider->setValue({1.0f, 2.0f, 3.0f});
slider->setCallback([](const Vec3& value) {
    // Handle value change
});

window->addWidget(slider);
#+END_SRC

** Hierarchical Composition

The system supports nested widget hierarchies:

#+BEGIN_SRC cpp
// Create container hierarchy
auto header = pUI->createWidget<CollapsingHeader>();
header->setLabel("Render Settings");
window->addWidget(header);

// Add widgets to container
auto checkbox = pUI->createWidget<Checkbox>();
checkbox->setLabel("Enable Shadows");
header->addWidget(checkbox);

auto slider = pUI->createWidget<SliderFloat>();
slider->setLabel("Shadow Bias");
header->addWidget(slider);
#+END_SRC

** Camera Control Widget

For scene camera management:

#+BEGIN_SRC cpp
// Create camera control widget
auto cameraWidget = pUI->createWidget<CameraControlWidget>();

// Connect to scene camera
Camera* sceneCamera = scene->getActiveCamera();
cameraWidget->setCamera(sceneCamera);

// Configure widget
cameraWidget->setPerspective(true);  // or false for orthographic
cameraWidget->setCameraPosition({0.0f, 5.0f, 10.0f});
cameraWidget->setCameraTarget({0.0f, 0.0f, 0.0f});
cameraWidget->setFOV(60.0f);

// Add to UI layout
window->addWidget(cameraWidget);
#+END_SRC

* System Integration

** Render Graph Integration

UI rendering is typically performed as a final pass in the render graph:

#+BEGIN_SRC cpp
auto* uiPass = pGraph->createPass("ui pass", aph::QueueType::Graphics);
uiPass->configure()
    .colorOutput("backbuffer", {
        .createInfo = colorTargetInfo,
        .attachmentInfo = {
            .loadOp = aph::AttachmentLoadOp::Load,  // Preserve scene rendering
        }
    })
    .build();

uiPass->recordExecute([this](aph::vk::CommandBuffer* pCmd) {
    m_pUI->render(pCmd);
});
#+END_SRC

** Resource System Integration

The UI system leverages the resource system for font loading:

#+BEGIN_SRC cpp
// Load a font through the resource system
auto fontPath = m_pFileSystem->resolvePath("font://Roboto-Medium.ttf");
uint32_t fontIndex = m_pUI->addFont(fontPath, 16.0f);
m_pUI->setActiveFont(fontIndex);
#+END_SRC

#+RESULTS:

* Advanced Usage

** Custom Widget Implementation

Implementing custom widgets requires proper ImGui integration:

#+BEGIN_SRC cpp
class CustomGizmo : public aph::Widget {
public:
    explicit CustomGizmo(UI* pUI) : Widget(pUI) {}
    
    WidgetType getType() const override {
        return WidgetType::Custom;
    }
    
    void draw() override {
        if (!m_enabled || m_label.empty())
            return;
            
        // ImGui context is already active here
        ImGui::PushID(this);
        
        // Custom drawing code
        ImDrawList* drawList = ImGui::GetWindowDrawList();
        ImVec2 pos = ImGui::GetCursorScreenPos();
        
        // Draw custom elements
        drawList->AddCircle(pos, m_radius, ImGui::GetColorU32(ImGuiCol_Button));
        
        ImGui::PopID();
    }
    
private:
    float m_radius = 50.0f;
};
#+END_SRC

** Using the CustomWidget Type

For quick prototyping without creating a full widget class:

#+BEGIN_SRC cpp
auto customWidget = ui->createWidget<CustomWidget>();
customWidget->setDrawCallback([]() {
    // Direct ImGui API usage for custom controls
    ImGui::BeginChild("custom_region", ImVec2(300, 200), true);
    
    ImGuiIO& io = ImGui::GetIO();
    ImDrawList* drawList = ImGui::GetWindowDrawList();
    
    // Custom rendering...
    
    ImGui::EndChild();
});
#+END_SRC

** Dynamic Widget Generation

Widget hierarchies can be dynamically generated based on runtime data:

#+BEGIN_SRC cpp
void PropertyPanel::rebuildFromObject(GameObject* object) {
    m_container->clear();
    
    if (!object)
        return;
        
    // Dynamically generate property widgets
    for (auto& property : object->getProperties()) {
        switch (property.getType()) {
            case PropertyType::Float: {
                auto slider = m_ui->createWidget<SliderFloat>();
                slider->setLabel(property.getName());
                slider->setValue(property.getValue<float>());
                slider->setCallback([&property](float value) {
                    property.setValue(value);
                });
                m_container->addWidget(slider);
                break;
            }
            case PropertyType::Vec3: {
                auto slider = m_ui->createWidget<SliderFloat3>();
                slider->setLabel(property.getName());
                slider->setValue(property.getValue<Vec3>());
                slider->setCallback([&property](const Vec3& value) {
                    property.setValue(value);
                });
                m_container->addWidget(slider);
                break;
            }
            // Other property types...
        }
    }
}
#+END_SRC

** Debugging with Breadcrumbs

To analyze UI rendering performance or diagnose issues:

#+BEGIN_SRC cpp
// Enable breadcrumb collection
ui->enableBreadcrumbs(true);

// After rendering, inspect the breadcrumb log
// The log will show a hierarchical view of UI operations with timestamps
// [+0.001ms] Render: Starting render process
// [+0.002ms] ├─ BeginFrame: Starting new UI frame
// [+0.003ms] ├─ BeginFrame: Starting new UI frame
// [+0.021ms] ├─ ContainerUpdate: Beginning container updates
// [+0.023ms] │  └─ DrawWindow: Camera Controls
// [+0.024ms] │  │  ├─ BeginWindow: Camera Controls
// [+0.031ms] │  │  └─ DrawWidget: CameraControl: 
// [+0.057ms] │  │  └─ EndWindow: Camera Controls
// [+0.058ms] ├─ ImGuiRender: Finalizing ImGui frame
// [+0.060ms] │  ├─ VulkanRender: ImGui Vulkan rendering
// [+0.137ms] ├─ EndFrame: Finishing UI frame
// [+0.138ms] ├─ EndFrame: Finishing UI frame
// [+0.139ms] RenderComplete: UI rendering completed

│  #+END_SRC
   
   * Thread Safety

The UI system is not thread-safe and should only be accessed from the main thread:

- Widget creation and destruction must occur on the main thread
- UI updates must synchronize with the render thread
- Callbacks may execute on the main thread during rendering
- Font loading operations should complete before rendering

* Performance Considerations

** Object Pooling

The UI system uses object pools to minimize memory allocations:

- Widget instances are allocated from pre-sized memory pools
- Windows have dedicated pools for more efficient management
- Destruction returns objects to their respective pools rather than deallocating

** Breadcrumb Overhead

When using the breadcrumb system:

- Enable only when debugging UI performance issues
- Adds minor CPU overhead due to timestamp collection
- Increases memory usage proportionally to UI complexity
- Generates logging output that may impact performance
